def CharSequence crosswordEmpty(Crossword c) {
	val body = new StringBuilder
	val node = NodeModelUtils.getNode(c)

	val leafs = node.leafNodes
					.filter[!isHidden]
					.map[text.trim]
					.filter[!empty]
					.toList

	for (text : leafs) {
		switch text {
			case "across": body.append(c.parteAcrossVacio)
			case "down": body.append(c.parteDownVacio)
		}
	}
'''
	«c.generarHeader».
	«body.toString»
	
'''
}
	
def CharSequence parteAcrossVacio(Crossword c) '''
Across
«FOR row: c.across.rows»
	«row.num». 
		«IF row.head == null»
			#.
		«ENDIF»
		«IF row.head instanceof Black»
				«IF ((row.head as Black).numtimes == 0)»
					#.
				«ENDIF»
				«IF (row.head as Black).numtimes > 0»
					«FOR i : new IntegerRange((row.head as Black).numtimes-1, 0, -1)»
						#
					«ENDFOR»
					.
				«ENDIF»
				«IF (row.head as Black).nextLink !== null»
					«(row.head as Black).nextLink.element.recursivaVacio»
				«ENDIF»
		«ENDIF»
		«IF row.head instanceof Word»
			«IF (row.head as Word).nextLink !== null»
				«(row.head as Word).nextLink.element.recursivaVacio»
			«ENDIF»
		«ENDIF»
«ENDFOR»
'''

def CharSequence parteDownVacio(Crossword c) '''
	Down
	«FOR column: c.down.columns»
		«column.num». 
			«IF column.head == null»
				#.
			«ENDIF»
			«IF column.head instanceof Black»
					«IF ((column.head as Black).numtimes == 0)»
						#.
					«ENDIF»
					«IF (column.head as Black).numtimes > 0»
						«FOR i : new IntegerRange((column.head as Black).numtimes-1, 0, -1)»
							#
						«ENDFOR»
						.
					«ENDIF»
					«IF (column.head as Black).nextLink !== null»
						«(column.head as Black).nextLink.element.recursivaVacio»
					«ENDIF»
			«ENDIF»
			«IF column.head instanceof Word»
				«IF (column.head as Word).nextLink !== null»
					«(column.head as Word).nextLink.element.recursivaVacio»
				«ENDIF»
			«ENDIF»
	«ENDFOR»
'''


def CharSequence recursivaVacio(Element e) '''
	«IF e == null»
		#.
	«ENDIF»
	«IF e instanceof Black»
			«IF ((e as Black).numtimes == 0)»
				#.
			«ENDIF»
			«IF (e as Black).numtimes > 0»
				«FOR i : new IntegerRange((e as Black).numtimes-1, 0, -1)»
					#
				«ENDFOR»
				.
			«ENDIF»
			«IF (e as Black).nextLink !== null»
				«(e as Black).nextLink.element.recursivaVacio»
			«ENDIF»
	«ENDIF»
	«IF e instanceof Word»
		«IF (e as Word).nextLink !== null»
			«(e as Word).nextLink.element.recursivaVacio»
		«ENDIF»
	«ENDIF»
'''